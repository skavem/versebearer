// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "./backend/models/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as gorm$0 from "../gorm.io/gorm/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../time/models.js";

export class ShownCouplet {
    /**
     * Creates a new ShownCouplet instance.
     * @param {Partial<ShownCouplet>} [$$source = {}] - The source object to create the ShownCouplet.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            /**
             * @member
             * @type {gorm$0.DeletedAt}
             */
            this["DeletedAt"] = null;
        }
        if (!("text" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["text"] = "";
        }
        if (!("number" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["number"] = 0;
        }
        if (!("label" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["label"] = "";
        }
        if (!("SongId" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["SongId"] = 0;
        }
        if (!("Song" in $$source)) {
            /**
             * @member
             * @type {models$0.Song}
             */
            this["Song"] = (new models$0.Song());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ShownCouplet instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ShownCouplet}
     */
    static createFrom($$source = {}) {
        const $$createField8_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Song" in $$parsedSource) {
            $$parsedSource["Song"] = $$createField8_0($$parsedSource["Song"]);
        }
        return new ShownCouplet(/** @type {Partial<ShownCouplet>} */($$parsedSource));
    }
}

export class ShownVerse {
    /**
     * Creates a new ShownVerse instance.
     * @param {Partial<ShownVerse>} [$$source = {}] - The source object to create the ShownVerse.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            /**
             * @member
             * @type {gorm$0.DeletedAt}
             */
            this["DeletedAt"] = null;
        }
        if (!("text" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["text"] = "";
        }
        if (!("number" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["number"] = 0;
        }
        if (!("ChapterId" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ChapterId"] = 0;
        }
        if (!("Book" in $$source)) {
            /**
             * @member
             * @type {models$0.Book}
             */
            this["Book"] = (new models$0.Book());
        }
        if (!("Chapter" in $$source)) {
            /**
             * @member
             * @type {models$0.Chapter}
             */
            this["Chapter"] = (new models$0.Chapter());
        }
        if (!("Translation" in $$source)) {
            /**
             * @member
             * @type {models$0.Translation}
             */
            this["Translation"] = (new models$0.Translation());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ShownVerse instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ShownVerse}
     */
    static createFrom($$source = {}) {
        const $$createField7_0 = $$createType1;
        const $$createField8_0 = $$createType2;
        const $$createField9_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Book" in $$parsedSource) {
            $$parsedSource["Book"] = $$createField7_0($$parsedSource["Book"]);
        }
        if ("Chapter" in $$parsedSource) {
            $$parsedSource["Chapter"] = $$createField8_0($$parsedSource["Chapter"]);
        }
        if ("Translation" in $$parsedSource) {
            $$parsedSource["Translation"] = $$createField9_0($$parsedSource["Translation"]);
        }
        return new ShownVerse(/** @type {Partial<ShownVerse>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = models$0.Song.createFrom;
const $$createType1 = models$0.Book.createFrom;
const $$createType2 = models$0.Chapter.createFrom;
const $$createType3 = models$0.Translation.createFrom;
