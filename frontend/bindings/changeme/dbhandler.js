// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "./backend/models/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function CloseScreen() {
    let $resultPromise = /** @type {any} */($Call.ByID(3315312654));
    return $resultPromise;
}

/**
 * @param {string} text
 * @param {string} label
 * @param {number} $number
 * @param {number} songId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function CreateCouplet(text, label, $number, songId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2010678286, text, label, $number, songId));
    return $resultPromise;
}

/**
 * @param {number} $number
 * @param {string} title
 * @returns {Promise<void> & { cancel(): void }}
 */
export function CreateSong($number, title) {
    let $resultPromise = /** @type {any} */($Call.ByID(4287967083, $number, title));
    return $resultPromise;
}

/**
 * @param {number} translationId
 * @returns {Promise<models$0.Book[]> & { cancel(): void }}
 */
export function GetBooks(translationId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2080810732, translationId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} bookId
 * @returns {Promise<models$0.Chapter[]> & { cancel(): void }}
 */
export function GetChapters(bookId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1459456200, bookId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} songId
 * @returns {Promise<models$0.Couplet[]> & { cancel(): void }}
 */
export function GetCouplets(songId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1114544263, songId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<$models.ShownCouplet | null> & { cancel(): void }}
 */
export function GetShownCouplet() {
    let $resultPromise = /** @type {any} */($Call.ByID(2437770933));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType7($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<$models.ShownVerse | null> & { cancel(): void }}
 */
export function GetShownVerse() {
    let $resultPromise = /** @type {any} */($Call.ByID(1445817640));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType9($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<models$0.Song[]> & { cancel(): void }}
 */
export function GetSongs() {
    let $resultPromise = /** @type {any} */($Call.ByID(2347438984));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType11($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<models$0.Translation[]> & { cancel(): void }}
 */
export function GetTranslations() {
    let $resultPromise = /** @type {any} */($Call.ByID(2033755146));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType13($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} chapterId
 * @returns {Promise<models$0.Verse[]> & { cancel(): void }}
 */
export function GetVerses(chapterId) {
    let $resultPromise = /** @type {any} */($Call.ByID(257555868, chapterId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType15($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function HideCouplet() {
    let $resultPromise = /** @type {any} */($Call.ByID(1132951874));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function HideVerse() {
    let $resultPromise = /** @type {any} */($Call.ByID(1209910283));
    return $resultPromise;
}

/**
 * @param {number} coupletId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveCouplet(coupletId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1141525230, coupletId));
    return $resultPromise;
}

/**
 * @param {number} coupletFloatId
 * @returns {Promise<$models.ShownCouplet | null> & { cancel(): void }}
 */
export function ShowCouplet(coupletFloatId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2298861477, coupletFloatId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType7($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} x
 * @param {number} y
 * @param {number} sizeX
 * @param {number} sizeY
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ShowScreen(x, y, sizeX, sizeY) {
    let $resultPromise = /** @type {any} */($Call.ByID(3622692775, x, y, sizeX, sizeY));
    return $resultPromise;
}

/**
 * @param {number} verseId
 * @returns {Promise<$models.ShownVerse | null> & { cancel(): void }}
 */
export function ShowVerse(verseId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2723401688, verseId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType9($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = models$0.Book.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = models$0.Chapter.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = models$0.Couplet.createFrom;
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = $models.ShownCouplet.createFrom;
const $$createType7 = $Create.Nullable($$createType6);
const $$createType8 = $models.ShownVerse.createFrom;
const $$createType9 = $Create.Nullable($$createType8);
const $$createType10 = models$0.Song.createFrom;
const $$createType11 = $Create.Array($$createType10);
const $$createType12 = models$0.Translation.createFrom;
const $$createType13 = $Create.Array($$createType12);
const $$createType14 = models$0.Verse.createFrom;
const $$createType15 = $Create.Array($$createType14);
