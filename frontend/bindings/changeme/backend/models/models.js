// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as gorm$0 from "../../../gorm.io/gorm/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../time/models.js";

export class Book {
    /**
     * Creates a new Book instance.
     * @param {Partial<Book>} [$$source = {}] - The source object to create the Book.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            /**
             * @member
             * @type {gorm$0.DeletedAt}
             */
            this["DeletedAt"] = null;
        }
        if (!("title" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["title"] = "";
        }
        if (!("shortName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["shortName"] = "";
        }
        if (!("number" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["number"] = 0;
        }
        if (!("dividerBefore" in $$source)) {
            /**
             * @member
             * @type {string | null}
             */
            this["dividerBefore"] = null;
        }
        if (!("TranslationId" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["TranslationId"] = 0;
        }
        if (!("chapters" in $$source)) {
            /**
             * @member
             * @type {Chapter[]}
             */
            this["chapters"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Book instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Book}
     */
    static createFrom($$source = {}) {
        const $$createField9_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("chapters" in $$parsedSource) {
            $$parsedSource["chapters"] = $$createField9_0($$parsedSource["chapters"]);
        }
        return new Book(/** @type {Partial<Book>} */($$parsedSource));
    }
}

export class Chapter {
    /**
     * Creates a new Chapter instance.
     * @param {Partial<Chapter>} [$$source = {}] - The source object to create the Chapter.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            /**
             * @member
             * @type {gorm$0.DeletedAt}
             */
            this["DeletedAt"] = null;
        }
        if (!("number" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["number"] = 0;
        }
        if (!("BookId" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["BookId"] = 0;
        }
        if (!("verses" in $$source)) {
            /**
             * @member
             * @type {Verse[]}
             */
            this["verses"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Chapter instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Chapter}
     */
    static createFrom($$source = {}) {
        const $$createField6_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("verses" in $$parsedSource) {
            $$parsedSource["verses"] = $$createField6_0($$parsedSource["verses"]);
        }
        return new Chapter(/** @type {Partial<Chapter>} */($$parsedSource));
    }
}

export class Couplet {
    /**
     * Creates a new Couplet instance.
     * @param {Partial<Couplet>} [$$source = {}] - The source object to create the Couplet.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            /**
             * @member
             * @type {gorm$0.DeletedAt}
             */
            this["DeletedAt"] = null;
        }
        if (!("text" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["text"] = "";
        }
        if (!("number" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["number"] = 0;
        }
        if (!("label" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["label"] = "";
        }
        if (!("SongId" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["SongId"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Couplet instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Couplet}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Couplet(/** @type {Partial<Couplet>} */($$parsedSource));
    }
}

export class Song {
    /**
     * Creates a new Song instance.
     * @param {Partial<Song>} [$$source = {}] - The source object to create the Song.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            /**
             * @member
             * @type {gorm$0.DeletedAt}
             */
            this["DeletedAt"] = null;
        }
        if (!("title" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["title"] = "";
        }
        if (!("number" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["number"] = 0;
        }
        if (!("couplets" in $$source)) {
            /**
             * @member
             * @type {Couplet[]}
             */
            this["couplets"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Song instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Song}
     */
    static createFrom($$source = {}) {
        const $$createField6_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("couplets" in $$parsedSource) {
            $$parsedSource["couplets"] = $$createField6_0($$parsedSource["couplets"]);
        }
        return new Song(/** @type {Partial<Song>} */($$parsedSource));
    }
}

export class Translation {
    /**
     * Creates a new Translation instance.
     * @param {Partial<Translation>} [$$source = {}] - The source object to create the Translation.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            /**
             * @member
             * @type {gorm$0.DeletedAt}
             */
            this["DeletedAt"] = null;
        }
        if (!("books" in $$source)) {
            /**
             * @member
             * @type {Book[]}
             */
            this["books"] = [];
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("shortName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["shortName"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Translation instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Translation}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType7;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("books" in $$parsedSource) {
            $$parsedSource["books"] = $$createField4_0($$parsedSource["books"]);
        }
        return new Translation(/** @type {Partial<Translation>} */($$parsedSource));
    }
}

export class Verse {
    /**
     * Creates a new Verse instance.
     * @param {Partial<Verse>} [$$source = {}] - The source object to create the Verse.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            /**
             * @member
             * @type {gorm$0.DeletedAt}
             */
            this["DeletedAt"] = null;
        }
        if (!("text" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["text"] = "";
        }
        if (!("number" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["number"] = 0;
        }
        if (!("ChapterId" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ChapterId"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Verse instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Verse}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Verse(/** @type {Partial<Verse>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Chapter.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = Verse.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = Couplet.createFrom;
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = Book.createFrom;
const $$createType7 = $Create.Array($$createType6);
